#!/usr/bin/env -S deno run --allow-read --allow-write

import { walk } from "jsr:@std/fs@1/walk";
import { relative } from "jsr:@std/path@1";

interface Asset {
  path: string;
  content: string;
  isBinary: boolean;
}

/**
 * Determines if a file should be treated as binary based on its extension
 */
function isBinaryFile(filename: string): boolean {
  const binaryExtensions = [".png", ".jpg", ".jpeg", ".gif", ".ico", ".woff", ".woff2", ".ttf"];
  return binaryExtensions.some((ext) => filename.toLowerCase().endsWith(ext));
}

/**
 * Reads and processes a single asset file
 */
async function processAsset(filePath: string, staticDir: string): Promise<Asset> {
  const relativePath = relative(staticDir, filePath);
  const isBinary = isBinaryFile(filePath);

  if (isBinary) {
    // Read binary files and convert to base64
    const fileContent = await Deno.readFile(filePath);
    const base64Content = btoa(String.fromCharCode(...fileContent));
    return {
      path: relativePath,
      content: base64Content,
      isBinary: true,
    };
  } else {
    // Read text files as UTF-8
    const textContent = await Deno.readTextFile(filePath);
    return {
      path: relativePath,
      content: textContent,
      isBinary: false,
    };
  }
}

/**
 * Escapes a string for safe inclusion in TypeScript string literals
 */
function escapeStringForTS(str: string): string {
  return str
    .replace(/\\/g, "\\\\")
    .replace(/`/g, "\\`")
    .replace(/\${/g, "\\${");
}

/**
 * Generates the bundled assets TypeScript module
 */
function generateAssetsModule(assets: Asset[]): string {
  const imports = `// This file is auto-generated by scripts/bundle-assets.ts
// DO NOT EDIT MANUALLY

export interface AssetInfo {
  content: string;
  isBinary: boolean;
}

`;

  const assetEntries = assets
    .map((asset) => {
      const escapedContent = escapeStringForTS(asset.content);
      return `  "${asset.path}": {
    content: \`${escapedContent}\`,
    isBinary: ${asset.isBinary},
  }`;
    })
    .join(",\n");

  const assetMap = `export const assets: Record<string, AssetInfo> = {
${assetEntries}
};

`;

  const helperFunctions = `/**
 * Gets an asset by its path
 */
export function getAsset(path: string): AssetInfo | undefined {
  // Normalize path (remove leading slash)
  const normalizedPath = path.startsWith("/") ? path.slice(1) : path;
  return assets[normalizedPath];
}

/**
 * Gets the content of an asset, handling binary/text differences
 */
export function getAssetContent(path: string): Uint8Array | string | undefined {
  const asset = getAsset(path);
  if (!asset) return undefined;

  if (asset.isBinary) {
    // Convert base64 back to binary
    const binaryString = atob(asset.content);
    const bytes = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
  }

  return asset.content;
}

/**
 * Lists all available asset paths
 */
export function listAssets(): string[] {
  return Object.keys(assets);
}
`;

  return imports + assetMap + helperFunctions;
}

/**
 * Main bundler function
 */
async function bundleAssets() {
  const staticDir = "./static";
  const outputFile = "./lib/bundled-assets.ts";

  console.log("🔧 Bundling static assets...");

  // Check if static directory exists
  try {
    await Deno.stat(staticDir);
  } catch {
    console.error(`❌ Static directory not found: ${staticDir}`);
    Deno.exit(1);
  }

  // Collect all files from static directory
  const assets: Asset[] = [];

  for await (const entry of walk(staticDir, { includeDirs: false })) {
    if (entry.isFile) {
      console.log(`  📄 Processing: ${relative(staticDir, entry.path)}`);
      const asset = await processAsset(entry.path, staticDir);
      assets.push(asset);
    }
  }

  // Generate the TypeScript module
  const moduleContent = generateAssetsModule(assets);

  // Ensure lib directory exists
  try {
    await Deno.mkdir("./lib", { recursive: true });
  } catch {
    // Directory already exists
  }

  // Write the bundled assets file
  await Deno.writeTextFile(outputFile, moduleContent);

  console.log(`✅ Generated ${outputFile} with ${assets.length} assets`);
  console.log(`📦 Assets bundled: ${assets.map((a) => a.path).join(", ")}`);
}

if (import.meta.main) {
  bundleAssets();
}
